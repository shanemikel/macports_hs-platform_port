# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 150013 2016-07-08 17:55:27Z mf2k@macports.org $

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0

name                ghc-bootstrap
set canonicalname   ghc

version             7.10.3
categories          lang haskell
maintainers         cal openmaintainer
license             BSD
platforms           darwin

# Warning: http://downloads.haskell.org/~ghc/7.10.3/ does not have a i386
# darwin build and 7.6.2 (which seems to be the latest build that has it) is
# affected by https://github.com/haskell/unix/pull/18, which causes the GHC
# build to fail on El Capitan and later. This means that
#  (a) I (or somebody else) would have to build a i386 ghc-bootstrap
#  (b) i386 builds of GHC are no longer supported.
# I'm going with (b) until somebody on i386 volunteers to build a ghc-bootstrap
# or convinces upstream to do so.
supported_archs     x86_64

universal_variant   no
installs_libs       no

description         The Glorious Glasgow Haskell Compilation System
long_description    This is a package that installs a binary GHC compiler for bootstrapping.

homepage            https://haskell.org/${canonicalname}
master_sites        https://downloads.haskell.org/~${canonicalname}/${version}/
distname            ${canonicalname}-${version}-${build_arch}-apple-darwin
worksrcdir          ${canonicalname}-${version}
use_xz              yes

checksums           ${canonicalname}-${version}-x86_64-apple-darwin${extract.suffix} \
                    rmd160  4f556937880d853448b482bfc7d7f1a6a0dd220f \
                    sha256  852781d43d41cd55d02f818fe798bb4d1f7e52f488408167f413f7948cf1e7df

#post-extract {
#    # Copy clang-wrapper for re-inplace during configure
#    xinstall -m 644 ${filespath}/clang-wrapper ${workpath}/clang-wrapper
#}

# Compilation (of the final non-bootstrap GHC, which uses the C compiler
# configured in this port) fails with older versions of clang. clang-4.1 from
# Xcode 4.5 is too old, clang-5.1 from from Xcode 5.1 works. I do not have
# any data points in between, so I'm blacklisting everything lower than 5.1.
# If you want to test the versions in between, be my guest.
# Also avoid LLVM GCC 4.2 and GCC 4.2, which are before MacPorts' clang 3.4
# in the fallback list on some systems.
compiler.blacklist-append \
                    llvm-gcc-4.2 \
                    gcc-4.2 \
                    {clang < 503.0.38} \
                    macports-clang-3.3

configure.pre_args  --prefix=${prefix}/share/ghc-bootstrap
configure.args      --with-gcc=${configure.cc}

#pre-configure {
#    # OK so because this binary has been prebuilt for libraries
#    # in /usr/lib we search these before macports stuff so (hopefully)
#    # weird things don't happen
#    configure.ldflags  -L/usr/lib
#    configure.cppflags -I/usr/include
#
#    # patch clang-wrapper and make sure it is used by patching settings.in
#    reinplace "s#@clang@#${configure.cc}#g" ${workpath}/clang-wrapper
#    reinplace "s#@SettingsCCompilerCommand@#${prefix}/share/ghc-bootstrap/libexec/clang-wrapper#g" ${worksrcpath}/settings.in
#}

build {}

post-destroot {
    ## install clang-wrapper to libexec
    #xinstall -d -m 755 ${destroot}${prefix}/share/ghc-bootstrap/libexec
    #xinstall -m 755 ${workpath}/clang-wrapper ${destroot}${prefix}/share/ghc-bootstrap/libexec

    # Delete all .dylib files, because some of them reference nonexistant
    # libraries (e.g.
    #   /opt/local/share/ghc-bootstrap/lib/ghc-7.10.3/Cabal_3ux67khMI118y6VpwrFnXN/libHSCabal-1.22.5.0-3ux67khMI118y6VpwrFnXN-ghc7.10.3.dylib
    # references
    #   /usr/local/lib/gcc/5/libgcc_s.1.dylib
    # which does not exist) and rev-upgrade complains and tries to rebuild the
    # port. Deleting them breaks bootstrapping using dynamic libraries in GHC,
    # but since the static libraries are still there, that is not a serious
    # problem.
    set nametool "install_name_tool -change /usr/local/lib/gcc/5/libgcc_s.1.dylib /usr/lib/libgcc_s.1.dylib"
    fs-traverse f ${destroot}${prefix} {
        if {[file isfile ${f}]} {
            set ext [file extension ${f}]
            if {${ext} eq ".dylib"} {
                system "${nametool} ${f}"
            }
        }
    }
    fs-traverse f ${destroot}${prefix}/share/ghc-bootstrap/lib/ghc-${version}/bin {
        if {[file type $f] eq "file"} {
            system "${nametool} ${f}"
        }
    }

    # We also delete $prefix/share/ghc-bootstrap/share/doc, because we
    # really don't need the documentation in a bootstrap port.
    delete ${destroot}${prefix}/share/ghc-bootstrap/share/doc
}

livecheck.type      none
